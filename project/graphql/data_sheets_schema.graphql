type AddressingGap
  {
    id: Uriorcurie!
    category: CategoryType
    name: String
    description: String
    subclassOf: [NamedThing]
    relatedTo: [NamedThing]
    contributorName: String
    contributorGithubName: String
    contributorOrcid: Uriorcurie
    contributionDate: Date
    usedSoftware: [Software]
    response: String
  }

type AnatomicalEntity
  {
    id: Uriorcurie!
    category: CategoryType
    name: String
    description: String
    subclassOf: [NamedThing]
    relatedTo: [NamedThing]
    contributorName: String
    contributorGithubName: String
    contributorOrcid: Uriorcurie
    contributionDate: Date
  }

type CleaningStrategy
  {
    id: Uriorcurie!
    category: CategoryType
    name: String
    subclassOf: [NamedThing]
    relatedTo: [NamedThing]
    contributorName: String
    contributorGithubName: String
    contributorOrcid: Uriorcurie
    contributionDate: Date
    usedSoftware: [Software]
    description: [String]
  }

type CollectionConsent
  {
    id: Uriorcurie!
    category: CategoryType
    name: String
    subclassOf: [NamedThing]
    relatedTo: [NamedThing]
    contributorName: String
    contributorGithubName: String
    contributorOrcid: Uriorcurie
    contributionDate: Date
    usedSoftware: [Software]
    description: [String]
  }

type CollectionMechanism
  {
    id: Uriorcurie!
    category: CategoryType
    name: String
    subclassOf: [NamedThing]
    relatedTo: [NamedThing]
    contributorName: String
    contributorGithubName: String
    contributorOrcid: Uriorcurie
    contributionDate: Date
    usedSoftware: [Software]
    description: [String]
  }

type CollectionNotification
  {
    id: Uriorcurie!
    category: CategoryType
    name: String
    subclassOf: [NamedThing]
    relatedTo: [NamedThing]
    contributorName: String
    contributorGithubName: String
    contributorOrcid: Uriorcurie
    contributionDate: Date
    usedSoftware: [Software]
    description: [String]
  }

type CollectionTimeframe
  {
    id: Uriorcurie!
    category: CategoryType
    name: String
    subclassOf: [NamedThing]
    relatedTo: [NamedThing]
    contributorName: String
    contributorGithubName: String
    contributorOrcid: Uriorcurie
    contributionDate: Date
    usedSoftware: [Software]
    description: [String]
  }

type Confidentiality
  {
    id: Uriorcurie!
    category: CategoryType
    name: String
    subclassOf: [NamedThing]
    relatedTo: [NamedThing]
    contributorName: String
    contributorGithubName: String
    contributorOrcid: Uriorcurie
    contributionDate: Date
    usedSoftware: [Software]
    confidentialElementsPresent: Boolean
    description: [String]
  }

type ConsentRevocation
  {
    id: Uriorcurie!
    category: CategoryType
    name: String
    subclassOf: [NamedThing]
    relatedTo: [NamedThing]
    contributorName: String
    contributorGithubName: String
    contributorOrcid: Uriorcurie
    contributionDate: Date
    usedSoftware: [Software]
    description: [String]
  }

type ContentWarning
  {
    id: Uriorcurie!
    category: CategoryType
    name: String
    description: String
    subclassOf: [NamedThing]
    relatedTo: [NamedThing]
    contributorName: String
    contributorGithubName: String
    contributorOrcid: Uriorcurie
    contributionDate: Date
    usedSoftware: [Software]
    contentWarningsPresent: Boolean
    warnings: [String]
  }

type Creator
  {
    id: Uriorcurie!
    category: CategoryType
    name: String
    description: String
    subclassOf: [NamedThing]
    relatedTo: [NamedThing]
    contributorName: String
    contributorGithubName: String
    contributorOrcid: Uriorcurie
    contributionDate: Date
    usedSoftware: [Software]
    principalInvestigator: Person
    affiliation: Organization
  }

type DataAnomaly
  {
    id: Uriorcurie!
    category: CategoryType
    name: String
    subclassOf: [NamedThing]
    relatedTo: [NamedThing]
    contributorName: String
    contributorGithubName: String
    contributorOrcid: Uriorcurie
    contributionDate: Date
    usedSoftware: [Software]
    description: [String]
  }

type DataCollector
  {
    id: Uriorcurie!
    category: CategoryType
    name: String
    subclassOf: [NamedThing]
    relatedTo: [NamedThing]
    contributorName: String
    contributorGithubName: String
    contributorOrcid: Uriorcurie
    contributionDate: Date
    usedSoftware: [Software]
    description: [String]
  }

type DataProtectionImpact
  {
    id: Uriorcurie!
    category: CategoryType
    name: String
    subclassOf: [NamedThing]
    relatedTo: [NamedThing]
    contributorName: String
    contributorGithubName: String
    contributorOrcid: Uriorcurie
    contributionDate: Date
    usedSoftware: [Software]
    description: [String]
  }

type Dataset
  {
    compression: CompressionEnum
    conformsTo: Uriorcurie
    conformsToClass: Uriorcurie
    conformsToSchema: Uriorcurie
    createdBy: [CreatorOrMaintainerEnum]
    createdOn: Datetime
    description: String
    doi: Uriorcurie
    downloadUrl: Uri
    id: Uriorcurie!
    issued: Datetime
    keywords: [String]
    language: String
    lastUpdatedOn: Datetime
    license: String
    modifiedBy: CreatorOrMaintainerEnum
    page: String
    publisher: Uriorcurie
    status: Uriorcurie
    title: String
    version: String
    wasDerivedFrom: String
    bytes: Integer
    dialect: String
    encoding: EncodingEnum
    format: FormatEnum
    hash: String
    md5: String
    mediaType: String
    path: String
    sha256: String
    purposes: [Purpose]
    tasks: [Task]
    addressingGaps: [AddressingGap]
    creators: [Creator]
    funders: [FundingMechanism]
    subsets: [DataSubset]
    instances: [Instance]
    anomalies: [DataAnomaly]
    externalResources: [ExternalResource]
    confidentialElements: [Confidentiality]
    contentWarnings: [ContentWarning]
    subpopulations: [Subpopulation]
    sensitiveElements: [SensitiveElement]
    acquisitionMethods: [InstanceAcquisition]
    collectionMechanisms: [CollectionMechanism]
    samplingStrategies: [SamplingStrategy]
    dataCollectors: [DataCollector]
    collectionTimeframes: [CollectionTimeframe]
    ethicalReviews: [EthicalReview]
    dataProtectionImpacts: [DataProtectionImpact]
    preprocessingStrategies: [PreprocessingStrategy]
    cleaningStrategies: [CleaningStrategy]
    labelingStrategies: [LabelingStrategy]
    rawSources: [RawData]
    existingUses: [ExistingUse]
    useRepository: [UseRepository]
    otherTasks: [OtherTask]
    futureUseImpacts: [FutureUseImpact]
    discouragedUses: [DiscouragedUse]
    distributionFormats: [DistributionFormat]
    distributionDates: [DistributionDate]
    licenseAndUseTerms: LicenseAndUseTerms
    ipRestrictions: IPRestrictions
    regulatoryRestrictions: ExportControlRegulatoryRestrictions
    maintainers: [Maintainer]
    errata: [Erratum]
    updates: UpdatePlan
    retentionLimit: RetentionLimits
    versionAccess: VersionAccess
    extensionMechanism: ExtensionMechanism
    isDeidentified: Deidentification
    isTabular: Boolean
  }

type DatasetCollection
  {
    compression: CompressionEnum
    conformsTo: Uriorcurie
    conformsToClass: Uriorcurie
    conformsToSchema: Uriorcurie
    createdBy: [CreatorOrMaintainerEnum]
    createdOn: Datetime
    description: String
    doi: Uriorcurie
    downloadUrl: Uri
    id: Uriorcurie!
    issued: Datetime
    keywords: [String]
    language: String
    lastUpdatedOn: Datetime
    license: String
    modifiedBy: CreatorOrMaintainerEnum
    page: String
    publisher: Uriorcurie
    status: Uriorcurie
    title: String
    version: String
    wasDerivedFrom: String
    resources: [Dataset]
  }

type DatasetProperty
  {
    id: Uriorcurie!
    category: CategoryType
    name: String
    description: String
    subclassOf: [NamedThing]
    relatedTo: [NamedThing]
    contributorName: String
    contributorGithubName: String
    contributorOrcid: Uriorcurie
    contributionDate: Date
    usedSoftware: [Software]
  }

type DataSubset
  {
    compression: CompressionEnum
    conformsTo: Uriorcurie
    conformsToClass: Uriorcurie
    conformsToSchema: Uriorcurie
    createdBy: [CreatorOrMaintainerEnum]
    createdOn: Datetime
    description: String
    doi: Uriorcurie
    downloadUrl: Uri
    id: Uriorcurie!
    issued: Datetime
    keywords: [String]
    language: String
    lastUpdatedOn: Datetime
    license: String
    modifiedBy: CreatorOrMaintainerEnum
    page: String
    publisher: Uriorcurie
    status: Uriorcurie
    title: String
    version: String
    wasDerivedFrom: String
    bytes: Integer
    dialect: String
    encoding: EncodingEnum
    format: FormatEnum
    hash: String
    md5: String
    mediaType: String
    path: String
    sha256: String
    purposes: [Purpose]
    tasks: [Task]
    addressingGaps: [AddressingGap]
    creators: [Creator]
    funders: [FundingMechanism]
    subsets: [DataSubset]
    instances: [Instance]
    anomalies: [DataAnomaly]
    externalResources: [ExternalResource]
    confidentialElements: [Confidentiality]
    contentWarnings: [ContentWarning]
    subpopulations: [Subpopulation]
    sensitiveElements: [SensitiveElement]
    acquisitionMethods: [InstanceAcquisition]
    collectionMechanisms: [CollectionMechanism]
    samplingStrategies: [SamplingStrategy]
    dataCollectors: [DataCollector]
    collectionTimeframes: [CollectionTimeframe]
    ethicalReviews: [EthicalReview]
    dataProtectionImpacts: [DataProtectionImpact]
    preprocessingStrategies: [PreprocessingStrategy]
    cleaningStrategies: [CleaningStrategy]
    labelingStrategies: [LabelingStrategy]
    rawSources: [RawData]
    existingUses: [ExistingUse]
    useRepository: [UseRepository]
    otherTasks: [OtherTask]
    futureUseImpacts: [FutureUseImpact]
    discouragedUses: [DiscouragedUse]
    distributionFormats: [DistributionFormat]
    distributionDates: [DistributionDate]
    licenseAndUseTerms: LicenseAndUseTerms
    ipRestrictions: IPRestrictions
    regulatoryRestrictions: ExportControlRegulatoryRestrictions
    maintainers: [Maintainer]
    errata: [Erratum]
    updates: UpdatePlan
    retentionLimit: RetentionLimits
    versionAccess: VersionAccess
    extensionMechanism: ExtensionMechanism
    isDeidentified: Deidentification
    isTabular: Boolean
    isDataSplit: Boolean
    isSubpopulation: Boolean
  }

type Deidentification
  {
    id: Uriorcurie!
    category: CategoryType
    name: String
    subclassOf: [NamedThing]
    relatedTo: [NamedThing]
    contributorName: String
    contributorGithubName: String
    contributorOrcid: Uriorcurie
    contributionDate: Date
    usedSoftware: [Software]
    identifiableElementsPresent: Boolean
    description: [String]
  }

type DirectCollection
  {
    id: Uriorcurie!
    category: CategoryType
    name: String
    subclassOf: [NamedThing]
    relatedTo: [NamedThing]
    contributorName: String
    contributorGithubName: String
    contributorOrcid: Uriorcurie
    contributionDate: Date
    usedSoftware: [Software]
    description: [String]
  }

type DiscouragedUse
  {
    id: Uriorcurie!
    category: CategoryType
    name: String
    subclassOf: [NamedThing]
    relatedTo: [NamedThing]
    contributorName: String
    contributorGithubName: String
    contributorOrcid: Uriorcurie
    contributionDate: Date
    usedSoftware: [Software]
    description: [String]
  }

type DistributionDate
  {
    id: Uriorcurie!
    category: CategoryType
    name: String
    subclassOf: [NamedThing]
    relatedTo: [NamedThing]
    contributorName: String
    contributorGithubName: String
    contributorOrcid: Uriorcurie
    contributionDate: Date
    usedSoftware: [Software]
    description: [String]
  }

type DistributionFormat
  {
    id: Uriorcurie!
    category: CategoryType
    name: String
    subclassOf: [NamedThing]
    relatedTo: [NamedThing]
    contributorName: String
    contributorGithubName: String
    contributorOrcid: Uriorcurie
    contributionDate: Date
    usedSoftware: [Software]
    description: [String]
  }

type Erratum
  {
    id: Uriorcurie!
    category: CategoryType
    name: String
    subclassOf: [NamedThing]
    relatedTo: [NamedThing]
    contributorName: String
    contributorGithubName: String
    contributorOrcid: Uriorcurie
    contributionDate: Date
    usedSoftware: [Software]
    description: [String]
  }

type EthicalReview
  {
    id: Uriorcurie!
    category: CategoryType
    name: String
    subclassOf: [NamedThing]
    relatedTo: [NamedThing]
    contributorName: String
    contributorGithubName: String
    contributorOrcid: Uriorcurie
    contributionDate: Date
    usedSoftware: [Software]
    description: [String]
  }

type ExistingUse
  {
    id: Uriorcurie!
    category: CategoryType
    name: String
    subclassOf: [NamedThing]
    relatedTo: [NamedThing]
    contributorName: String
    contributorGithubName: String
    contributorOrcid: Uriorcurie
    contributionDate: Date
    usedSoftware: [Software]
    description: [String]
  }

type ExportControlRegulatoryRestrictions
  {
    id: Uriorcurie!
    category: CategoryType
    name: String
    subclassOf: [NamedThing]
    relatedTo: [NamedThing]
    contributorName: String
    contributorGithubName: String
    contributorOrcid: Uriorcurie
    contributionDate: Date
    usedSoftware: [Software]
    description: [String]
  }

type ExtensionMechanism
  {
    id: Uriorcurie!
    category: CategoryType
    name: String
    subclassOf: [NamedThing]
    relatedTo: [NamedThing]
    contributorName: String
    contributorGithubName: String
    contributorOrcid: Uriorcurie
    contributionDate: Date
    usedSoftware: [Software]
    description: [String]
  }

type ExternalResource
  {
    id: Uriorcurie!
    category: CategoryType
    name: String
    description: String
    subclassOf: [NamedThing]
    relatedTo: [NamedThing]
    contributorName: String
    contributorGithubName: String
    contributorOrcid: Uriorcurie
    contributionDate: Date
    usedSoftware: [Software]
    externalResources: [String]
    futureGuarantees: [String]
    archival: [Boolean]
    restrictions: [String]
  }

type FormatDialect
  {
    id: Uriorcurie!
    commentPrefix: String
    delimiter: String
    doubleQuote: String
    header: String
    quoteChar: String
  }

type FundingMechanism
  {
    id: Uriorcurie!
    category: CategoryType
    name: String
    description: String
    subclassOf: [NamedThing]
    relatedTo: [NamedThing]
    contributorName: String
    contributorGithubName: String
    contributorOrcid: Uriorcurie
    contributionDate: Date
    usedSoftware: [Software]
    grantor: Grantor
    grant: Grant
  }

type FutureUseImpact
  {
    id: Uriorcurie!
    category: CategoryType
    name: String
    subclassOf: [NamedThing]
    relatedTo: [NamedThing]
    contributorName: String
    contributorGithubName: String
    contributorOrcid: Uriorcurie
    contributionDate: Date
    usedSoftware: [Software]
    description: [String]
  }

type Grant
  {
    id: Uriorcurie!
    category: CategoryType
    name: String
    description: String
    subclassOf: [NamedThing]
    relatedTo: [NamedThing]
    contributorName: String
    contributorGithubName: String
    contributorOrcid: Uriorcurie
    contributionDate: Date
    grantNumber: String
  }

type Grantor
  {
    id: Uriorcurie!
    category: CategoryType
    name: String
    description: String
    subclassOf: [NamedThing]
    contributorName: String
    contributorGithubName: String
    contributorOrcid: Uriorcurie
    contributionDate: Date
    rorId: RorIdentifier
    wikidataId: WikidataIdentifier
    url: Uriorcurie
    relatedTo: [NamedThing]
  }

type Information
  {
    compression: CompressionEnum
    conformsTo: Uriorcurie
    conformsToClass: Uriorcurie
    conformsToSchema: Uriorcurie
    createdBy: [CreatorOrMaintainerEnum]
    createdOn: Datetime
    description: String
    doi: Uriorcurie
    downloadUrl: Uri
    id: Uriorcurie!
    issued: Datetime
    keywords: [String]
    language: String
    lastUpdatedOn: Datetime
    license: String
    modifiedBy: CreatorOrMaintainerEnum
    page: String
    publisher: Uriorcurie
    status: Uriorcurie
    title: String
    version: String
    wasDerivedFrom: String
  }

type Instance
  {
    id: Uriorcurie!
    category: CategoryType
    name: String
    description: String
    subclassOf: [NamedThing]
    relatedTo: [NamedThing]
    contributorName: String
    contributorGithubName: String
    contributorOrcid: Uriorcurie
    contributionDate: Date
    usedSoftware: [Software]
    dataTopic: Uriorcurie
    instanceType: String
    dataSubstrate: Uriorcurie
    counts: Integer
    label: Boolean
    labelDescription: String
    samplingStrategies: [SamplingStrategy]
    missingInformation: [MissingInfo]
  }

type InstanceAcquisition
  {
    id: Uriorcurie!
    category: CategoryType
    name: String
    subclassOf: [NamedThing]
    relatedTo: [NamedThing]
    contributorName: String
    contributorGithubName: String
    contributorOrcid: Uriorcurie
    contributionDate: Date
    usedSoftware: [Software]
    description: [String]
    wasDirectlyObserved: Boolean
    wasReportedBySubjects: Boolean
    wasInferredDerived: Boolean
    wasValidatedVerified: Boolean
  }

type IPRestrictions
  {
    id: Uriorcurie!
    category: CategoryType
    name: String
    subclassOf: [NamedThing]
    relatedTo: [NamedThing]
    contributorName: String
    contributorGithubName: String
    contributorOrcid: Uriorcurie
    contributionDate: Date
    usedSoftware: [Software]
    description: [String]
  }

type LabelingStrategy
  {
    id: Uriorcurie!
    category: CategoryType
    name: String
    subclassOf: [NamedThing]
    relatedTo: [NamedThing]
    contributorName: String
    contributorGithubName: String
    contributorOrcid: Uriorcurie
    contributionDate: Date
    usedSoftware: [Software]
    description: [String]
  }

type LicenseAndUseTerms
  {
    id: Uriorcurie!
    category: CategoryType
    name: String
    subclassOf: [NamedThing]
    relatedTo: [NamedThing]
    contributorName: String
    contributorGithubName: String
    contributorOrcid: Uriorcurie
    contributionDate: Date
    usedSoftware: [Software]
    description: [String]
  }

type Maintainer
  {
    id: Uriorcurie!
    category: CategoryType
    name: String
    subclassOf: [NamedThing]
    relatedTo: [NamedThing]
    contributorName: String
    contributorGithubName: String
    contributorOrcid: Uriorcurie
    contributionDate: Date
    usedSoftware: [Software]
    description: [CreatorOrMaintainerEnum]
  }

type MissingInfo
  {
    id: Uriorcurie!
    category: CategoryType
    name: String
    description: String
    subclassOf: [NamedThing]
    relatedTo: [NamedThing]
    contributorName: String
    contributorGithubName: String
    contributorOrcid: Uriorcurie
    contributionDate: Date
    usedSoftware: [Software]
    missing: [String]
    whyMissing: [String]
  }

type NamedThing
  {
    id: Uriorcurie!
    category: CategoryType
    name: String
    description: String
    subclassOf: [NamedThing]
    relatedTo: [NamedThing]
    contributorName: String
    contributorGithubName: String
    contributorOrcid: Uriorcurie
    contributionDate: Date
  }

type Organization
  {
    id: Uriorcurie!
    category: CategoryType
    name: String
    description: String
    subclassOf: [NamedThing]
    contributorName: String
    contributorGithubName: String
    contributorOrcid: Uriorcurie
    contributionDate: Date
    rorId: RorIdentifier
    wikidataId: WikidataIdentifier
    url: Uriorcurie
    relatedTo: [NamedThing]
  }

type OrganizationContainer
  {
    organizations: [Organization]
  }

type OtherTask
  {
    id: Uriorcurie!
    category: CategoryType
    name: String
    subclassOf: [NamedThing]
    relatedTo: [NamedThing]
    contributorName: String
    contributorGithubName: String
    contributorOrcid: Uriorcurie
    contributionDate: Date
    usedSoftware: [Software]
    description: [String]
  }

type Person
  {
    id: Uriorcurie!
    category: CategoryType
    name: String
    description: String
    subclassOf: [NamedThing]
    relatedTo: [NamedThing]
    contributorName: String
    contributorGithubName: String
    contributorOrcid: Uriorcurie
    contributionDate: Date
    affiliation: [Organization]
    email: String
  }

type PreprocessingStrategy
  {
    id: Uriorcurie!
    category: CategoryType
    name: String
    subclassOf: [NamedThing]
    relatedTo: [NamedThing]
    contributorName: String
    contributorGithubName: String
    contributorOrcid: Uriorcurie
    contributionDate: Date
    usedSoftware: [Software]
    description: [String]
  }

type Purpose
  {
    id: Uriorcurie!
    category: CategoryType
    name: String
    description: String
    subclassOf: [NamedThing]
    relatedTo: [NamedThing]
    contributorName: String
    contributorGithubName: String
    contributorOrcid: Uriorcurie
    contributionDate: Date
    usedSoftware: [Software]
    response: String
  }

type RawData
  {
    id: Uriorcurie!
    category: CategoryType
    name: String
    subclassOf: [NamedThing]
    relatedTo: [NamedThing]
    contributorName: String
    contributorGithubName: String
    contributorOrcid: Uriorcurie
    contributionDate: Date
    usedSoftware: [Software]
    description: [String]
  }

type Relationships
  {
    id: Uriorcurie!
    category: CategoryType
    name: String
    subclassOf: [NamedThing]
    relatedTo: [NamedThing]
    contributorName: String
    contributorGithubName: String
    contributorOrcid: Uriorcurie
    contributionDate: Date
    usedSoftware: [Software]
    description: [String]
  }

type RetentionLimits
  {
    id: Uriorcurie!
    category: CategoryType
    name: String
    subclassOf: [NamedThing]
    relatedTo: [NamedThing]
    contributorName: String
    contributorGithubName: String
    contributorOrcid: Uriorcurie
    contributionDate: Date
    usedSoftware: [Software]
    description: [String]
  }

type SamplingStrategy
  {
    id: Uriorcurie!
    category: CategoryType
    name: String
    description: String
    subclassOf: [NamedThing]
    relatedTo: [NamedThing]
    contributorName: String
    contributorGithubName: String
    contributorOrcid: Uriorcurie
    contributionDate: Date
    usedSoftware: [Software]
    isSample: [Boolean]
    isRandom: [Boolean]
    sourceData: [String]
    isRepresentative: [Boolean]
    representativeVerification: [String]
    whyNotRepresentative: [String]
    strategies: [String]
  }

type SensitiveElement
  {
    id: Uriorcurie!
    category: CategoryType
    name: String
    subclassOf: [NamedThing]
    relatedTo: [NamedThing]
    contributorName: String
    contributorGithubName: String
    contributorOrcid: Uriorcurie
    contributionDate: Date
    usedSoftware: [Software]
    sensitiveElementsPresent: Boolean
    description: [String]
  }

type Software
  {
    id: Uriorcurie!
    category: CategoryType
    name: String
    description: String
    subclassOf: [NamedThing]
    relatedTo: [NamedThing]
    contributorName: String
    contributorGithubName: String
    contributorOrcid: Uriorcurie
    contributionDate: Date
    version: String
    license: String
    url: String
  }

type Splits
  {
    id: Uriorcurie!
    category: CategoryType
    name: String
    subclassOf: [NamedThing]
    relatedTo: [NamedThing]
    contributorName: String
    contributorGithubName: String
    contributorOrcid: Uriorcurie
    contributionDate: Date
    usedSoftware: [Software]
    description: [String]
  }

type Subpopulation
  {
    id: Uriorcurie!
    category: CategoryType
    name: String
    description: String
    subclassOf: [NamedThing]
    relatedTo: [NamedThing]
    contributorName: String
    contributorGithubName: String
    contributorOrcid: Uriorcurie
    contributionDate: Date
    usedSoftware: [Software]
    subpopulationElementsPresent: Boolean
    identification: [String]
    distribution: [String]
  }

type Task
  {
    id: Uriorcurie!
    category: CategoryType
    name: String
    description: String
    subclassOf: [NamedThing]
    relatedTo: [NamedThing]
    contributorName: String
    contributorGithubName: String
    contributorOrcid: Uriorcurie
    contributionDate: Date
    usedSoftware: [Software]
    response: String
  }

type ThirdPartySharing
  {
    id: Uriorcurie!
    category: CategoryType
    name: String
    subclassOf: [NamedThing]
    relatedTo: [NamedThing]
    contributorName: String
    contributorGithubName: String
    contributorOrcid: Uriorcurie
    contributionDate: Date
    usedSoftware: [Software]
    description: Boolean
  }

type UpdatePlan
  {
    id: Uriorcurie!
    category: CategoryType
    name: String
    subclassOf: [NamedThing]
    relatedTo: [NamedThing]
    contributorName: String
    contributorGithubName: String
    contributorOrcid: Uriorcurie
    contributionDate: Date
    usedSoftware: [Software]
    description: [String]
  }

type UseRepository
  {
    id: Uriorcurie!
    category: CategoryType
    name: String
    subclassOf: [NamedThing]
    relatedTo: [NamedThing]
    contributorName: String
    contributorGithubName: String
    contributorOrcid: Uriorcurie
    contributionDate: Date
    usedSoftware: [Software]
    description: [String]
  }

type VersionAccess
  {
    id: Uriorcurie!
    category: CategoryType
    name: String
    subclassOf: [NamedThing]
    relatedTo: [NamedThing]
    contributorName: String
    contributorGithubName: String
    contributorOrcid: Uriorcurie
    contributionDate: Date
    usedSoftware: [Software]
    description: [String]
  }

